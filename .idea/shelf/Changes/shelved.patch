Index: guessing_word/word_list.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/guessing_word/word_list.py b/guessing_word/word_list.py
new file mode 100644
--- /dev/null	(date 1726086339451)
+++ b/guessing_word/word_list.py	(date 1726086339451)
@@ -0,0 +1,3 @@
+# you can enter which words you want to word_list
+
+word_list = []
Index: guessing_word/logo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/guessing_word/logo.py b/guessing_word/logo.py
new file mode 100644
--- /dev/null	(date 1726086339436)
+++ b/guessing_word/logo.py	(date 1726086339436)
@@ -0,0 +1,8 @@
+logo = ''' _                                             
+| |                                            
+| |__   __ _ _ __   __ _ _ __ ___   __ _ _ __  
+| '_ \ / _` | '_ \ / _` | '_ ` _ \ / _` | '_ \ 
+| | | | (_| | | | | (_| | | | | | | (_| | | | |
+|_| |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
+                    __/ |                      
+                   |___/  '''
\ No newline at end of file
Index: guessing_word/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/guessing_word/main.py b/guessing_word/main.py
new file mode 100644
--- /dev/null	(date 1726086339467)
+++ b/guessing_word/main.py	(date 1726086339467)
@@ -0,0 +1,58 @@
+import random
+
+from word_list import word_list
+
+from logo import logo
+
+
+print(logo)
+
+chosen_word = random.choice(word_list)
+
+guessing_word = ''
+
+for i in range(len(chosen_word)):
+    guessing_word += '_'
+
+print(f"word {guessing_word}")
+
+correct_letters = []
+start = False
+lives = 6
+
+while not start:
+    print(f'***  You have {lives}/6 lives  ***')
+    guess = input('Guess the letter in the word: ').lower()
+
+    display_word = ''
+    if guess in correct_letters:
+        print(f'You have already enter this {guess} letter')
+
+    for letter in chosen_word:
+
+        if letter.lower() == guess:
+            display_word += guess
+            correct_letters.append(guess)
+
+        elif letter in correct_letters:
+            display_word += letter
+
+        else:
+            display_word += '_'
+
+    print(display_word)
+
+    if guess not in chosen_word:
+        lives -= 1
+        if lives == 0:
+            start = True
+            print("*^*"*8,'You Lose!'"*^*"*8)
+
+    if '_' not in display_word:
+        start = True
+        print('You Win!')
+
+
+
+
+
Index: password_generator/password_generator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/password_generator/password_generator.py b/password_generator/password_generator.py
new file mode 100644
--- /dev/null	(date 1726147746322)
+++ b/password_generator/password_generator.py	(date 1726147746322)
@@ -0,0 +1,45 @@
+import random
+
+print('Welcome to PyPassword Generator')
+num_letters = int(input("How many letters would you like in your password?\n"))
+num_symbols = int(input("How many symbols would you like?\n"))
+num_numbers = int(input('How many numbers would you like?\n'))
+
+letters = []
+numbers = []
+symbols = []
+for i in range(65, 90):
+    letters.extend(chr(i))
+
+for i in range(97, 123):
+    letters.append(chr(i))
+
+for i in range(48, 58):
+    numbers.append(int(chr(i)))
+
+for i in range(33, 44):
+    if chr(i) != "'" and chr(i) != '"':
+        symbols.append(chr(i))
+
+password = []
+
+while num_numbers > 0:
+    password.append(random.choice(numbers))
+    num_numbers -= 1
+
+
+while num_symbols > 0:
+    password.append(random.choice(symbols))
+    num_symbols -= 1
+
+
+while num_letters > 0:
+    password.append(random.choice(letters))
+    num_letters -= 1
+
+
+print('Your password is: ', end="")
+for i in range(len(password)):
+    choice = random.choice(password)
+    print(str(choice), end=' ')
+    password.remove(choice)
Index: Ceaser_Cipher/Caeser_Cipher.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ceaser_Cipher/Caeser_Cipher.py b/Ceaser_Cipher/Caeser_Cipher.py
new file mode 100644
--- /dev/null	(date 1726094557355)
+++ b/Ceaser_Cipher/Caeser_Cipher.py	(date 1726094557355)
@@ -0,0 +1,39 @@
+alphabet = [chr(i) for i in range(97, 123)]
+
+
+def ceaser(original_text, shift_amount, encode_or_decode):
+
+    output = ''
+
+    if encode_or_decode == 'decode':
+        shift_amount *= -1
+
+    for letter in original_text:
+        if letter in alphabet:
+            shifted_position = alphabet.index(letter) + shift_amount
+            shifted_position %= len(alphabet)
+
+            output += alphabet[shifted_position]
+
+        else:
+            output += letter
+
+    print(f"Here is the {'decoded' if encode_or_decode == 'decode' else 'encoded'} result: {output}")
+
+
+should_continue = True
+
+
+while should_continue:
+
+    direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
+    text = input("Type your message:\n").lower()
+    shift = int(input("Type the shift number:\n"))
+
+    ceaser(original_text=text, shift_amount=shift, encode_or_decode=direction)
+
+    restart = input('Type "yes" if you want to go again. Otherwise, type "no".\n')
+
+    if restart == "no":
+        should_continue = False
+        print('GoodBye!')
diff --git a/Auction/auction.py b/Auction/auction.py
new file mode 100644
